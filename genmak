#!/bin/sh

VERSION=0.0.5
BASE=`pwd`

if [ $# -gt 1 ] ; then
	ADD_LIB=""
	INC_LIB=""
	for i in $2 ; do
		ADD_LIB="$ADD_LIB -L$i"
		INC_LIB="$INC_LIB -I$BASE/$i"
	done
fi


cd $1
echo "entering directory $1"

HOST=`uname | tr '[a-z]' '[A-Z]' | sed 's/-//'`
HFILES=`echo *.h`
EXTENSION=""

if [ $WIN32 = "1" ] ; then
	HOST="WIN32"
	EXTENSION=".exe"
fi

if [ "$HFILES" = "*.h" ] ;  then
	HFILES=""
fi	

if [ -z "$CXX" ] && g++ -v > /dev/null 2>&1 ; then
	CXX=g++
	if [ "$NOOPT" = 1 ] ; then
		CXXFLAGS="$CXXFLAGS"
	else
		CXXFLAGS="$CXXFLAGS -O2 -Wall -Woverloaded-virtual -Wshadow"
	fi
fi	

if [ $HOST = "SINIX" ] || [ $HOST = "SUNOS" ] ; then
	LDFLAGS="$LDFLAGS -lnsl -lc -lsocket -lresolv"
fi	

CFILES=`echo *.cpp`
OFILES=`echo *.cpp | sed 's/\.cpp/\.o/g'`
DFILES=`echo *.cpp | sed 's/\.cpp/\.d/g'`
USE_CC=0
EXT=cpp

if test "$CFILES" = '*.cpp' ; then
	CFILES=`echo *.cc`
	OFILES=`echo *.cc | sed 's/\.cc/\.o/g'`
	DFILES=`echo *.cc | sed 's/\.cc/\.d/g'`
	USE_CC=1
	EXT=cc
fi

BUF=""
for ofile in $OFILES ; do
	BUF="${BUF} .libs/${ofile}"
done

OFILES=$BUF

BUF=""
for dfile in $DFILES ; do
	BUF="${BUF} .libs/${dfile}"
done

DFILES=$BUF

echo "EXTENSION=$EXTENSION" > Makefile
echo "HOST=$HOST" >> Makefile
echo "HFILES=$HFILES" >> Makefile
echo "CFILES=$CFILES" >> Makefile
echo "OFILES=$OFILES" >> Makefile
echo "VERSION=$VERSION" >> Makefile
echo "CXX=$CXX" >> Makefile
echo "CXXFLAGS=$CXXFLAGS $INC_LIB -D$HOST -DVERSION='\"$VERSION\"' -DNOWAMAS" >> Makefile
echo "LDFLAGS=$LDFLAGS $ADD_LIB" >> Makefile
echo "RM=rm -f" >> Makefile
echo >> Makefile
echo >> Makefile

cat < Makefile.in >> Makefile

echo >> Makefile
echo >> Makefile

cat >> Makefile <<EOF

.libs/%.o: %.$EXT .libs/.objdir
	\$(CXX) \$(CXXFLAGS) -o \$@ -c $<

.PHONY: clean
clean:
	\$(RM) \$(OFILES) \$(EXE) core .dependencies
	if test -d .libs ; then rm -rf .libs ; fi


.libs/.objdir:
	if ! test -d .libs ; then mkdir .libs ; fi
	touch .libs/.objdir

.libs/%.d : %.$EXT .libs/.objdir
	@\$(CXX) \$(CXXFLAGS) -MF"\$@" -MM -MP -MT"\$@" -MT".libs/\$(<:.$EXT=.o)" "\$<"

include $DFILES

EOF
